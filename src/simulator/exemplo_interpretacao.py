#!/usr/bin/env python3
"""
Exemplo de Interpreta√ß√£o dos Gr√°ficos do Simulador

Este script roda uma simula√ß√£o curta e explica o que est√° acontecendo
nos gr√°ficos em tempo real.
"""

import sys
import os
sys.path.append(os.path.dirname(__file__))

import custom_logging as logging
from planador_simulator import PlanadorSimulator
import time

logger = logging.getLogger(__name__)

def interpretar_dados(status):
    """Interpreta os dados do simulador e explica o que est√° acontecendo"""
    
    # Dados do sensor
    roll = status['sensor_data']['roll']
    pitch = status['sensor_data']['pitch']
    yaw_rate = status['sensor_data']['yaw_rate']
    
    # Posi√ß√µes dos servos
    flaps_l = status['servo_positions']['flaps_left']
    flaps_r = status['servo_positions']['flaps_right']
    elevator = status['servo_positions']['elevator']
    rudder = status['servo_positions']['rudder']
    
    interpretacao = []
    
    # An√°lise da atitude
    if abs(roll) < 2 and abs(pitch) < 2:
        interpretacao.append("‚úÖ ATITUDE EST√ÅVEL: Planador bem nivelado")
    elif abs(roll) < 10 and abs(pitch) < 10:
        interpretacao.append("üü° ATITUDE MODERADA: Sistema corrigindo")
    else:
        interpretacao.append("üî¥ ATITUDE INST√ÅVEL: Corre√ß√µes necess√°rias")
    
    # An√°lise do yaw rate
    if abs(yaw_rate) < 1:
        interpretacao.append("‚úÖ YAW EST√ÅVEL: Sem rota√ß√£o indesejada")
    elif abs(yaw_rate) < 5:
        interpretacao.append("üü° YAW MODERADO: Pequena rota√ß√£o")
    else:
        interpretacao.append("üî¥ YAW ALTO: Rota√ß√£o significativa")
    
    # An√°lise dos flaps (controle de roll)
    diff_flaps = abs(flaps_l - flaps_r)
    if diff_flaps < 5:
        interpretacao.append("‚úÖ FLAPS NEUTROS: Sem corre√ß√£o de roll")
    elif diff_flaps < 20:
        interpretacao.append("üü° FLAPS ATIVOS: Corrigindo roll moderado")
    else:
        interpretacao.append("üî¥ FLAPS EXTREMOS: Corre√ß√£o forte de roll")
    
    # An√°lise do elevator (controle de pitch)
    elevator_neutral = abs(elevator - 90)
    if elevator_neutral < 5:
        interpretacao.append("‚úÖ ELEVATOR NEUTRO: Sem corre√ß√£o de pitch")
    elif elevator_neutral < 20:
        interpretacao.append("üü° ELEVATOR ATIVO: Corrigindo pitch")
    else:
        interpretacao.append("üî¥ ELEVATOR EXTREMO: Corre√ß√£o forte de pitch")
    
    # An√°lise do rudder (controle de yaw)
    rudder_neutral = abs(rudder - 90)
    if rudder_neutral < 5:
        interpretacao.append("‚úÖ RUDDER NEUTRO: Sem corre√ß√£o de yaw")
    elif rudder_neutral < 20:
        interpretacao.append("üü° RUDDER ATIVO: Corrigindo yaw")
    else:
        interpretacao.append("üî¥ RUDDER EXTREMO: Corre√ß√£o forte de yaw")
    
    return interpretacao

def exemplo_interpretacao():
    """Roda simula√ß√£o com interpreta√ß√£o em tempo real"""
    
    logger.info("=== EXEMPLO DE INTERPRETA√á√ÉO DOS GR√ÅFICOS ===")
    logger.info("Iniciando simula√ß√£o com explica√ß√µes...")
    
    # Criar simulador
    simulator = PlanadorSimulator()
    simulator.hardware.disturbance_amplitude = 8.0  # Perturba√ß√£o m√©dia
    
    # Simular por 10 segundos
    dt = 1.0 / 50.0  # 50Hz
    duration = 10.0
    
    simulator.running = True
    simulator.start_time = time.time()
    
    loop_count = 0
    
    while simulator.running and (time.time() - simulator.start_time) < duration:
        loop_start = time.time()
        
        # Executar itera√ß√£o do simulador
        simulator.main_loop_iteration(dt)
        
        loop_count += 1
        
        # A cada 50 loops (1 segundo), interpretar os dados
        if loop_count % 50 == 0:
            status = simulator.get_status()
            segundos = int(time.time() - simulator.start_time)
            
            logger.info(f"\n--- SEGUNDO {segundos} ---")
            logger.info(f"Roll: {status['sensor_data']['roll']:.1f}¬∞ | "
                       f"Pitch: {status['sensor_data']['pitch']:.1f}¬∞ | "
                       f"Yaw Rate: {status['sensor_data']['yaw_rate']:.1f}¬∞/s")
            
            logger.info(f"Flaps: L={status['servo_positions']['flaps_left']:.0f}¬∞ "
                       f"R={status['servo_positions']['flaps_right']:.0f}¬∞ | "
                       f"Elevator: {status['servo_positions']['elevator']:.0f}¬∞ | "
                       f"Rudder: {status['servo_positions']['rudder']:.0f}¬∞")
            
            interpretacoes = interpretar_dados(status)
            for interp in interpretacoes:
                logger.info(f"  {interp}")
        
        # Controlar frequ√™ncia
        loop_time = time.time() - loop_start
        sleep_time = dt - loop_time
        if sleep_time > 0:
            time.sleep(sleep_time)
    
    simulator.running = False
    
    # Status final
    final_status = simulator.get_status()
    logger.info(f"\n=== AN√ÅLISE FINAL ===")
    logger.info(f"Loops executados: {final_status['loop_count']}")
    logger.info(f"Frequ√™ncia m√©dia: {final_status['frequency']:.1f}Hz")
    
    interpretacoes_finais = interpretar_dados(final_status)
    for interp in interpretacoes_finais:
        logger.info(f"  {interp}")
    
    logger.info("\n=== COMO LER OS GR√ÅFICOS ===")
    logger.info("1. Atitude (Roll/Pitch): Mostra se o planador est√° nivelado")
    logger.info("2. Yaw Rate: Mostra se o planador est√° girando")
    logger.info("3. Servos Flaps: Movimentos opostos corrigem roll")
    logger.info("4. Elevator/Rudder: Corrigem pitch e yaw respectivamente")
    logger.info("\nConsulte EXPLICACAO_GRAFICOS.md para detalhes completos!")

if __name__ == "__main__":
    exemplo_interpretacao()